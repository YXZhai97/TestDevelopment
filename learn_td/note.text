
课程笔记：测试开发全套教程
https://www.bilibili.com/video/BV13U4y137to?p=2
---------------------------------------------------
P2. 软件分层模型
	B/S (Browser/Server)
	C/S (Client/Server)
	
	软件分为三层：
	1. 表示层（客户端）
		接收用户请求，显示服务端相应
	2. 业务逻辑层（web服务器）
		接收，处理用户请求
	3. 数据处理层（数据库服务器）
		保存系统数据，对数据进行增，删，改，查
	
	Example:
		用户输入密码，发起登录请求（客户端对密码输入进行初步判断）
		调用服务端脚本处理请求（根据请求而定）
		将请求发送到数据库，验证用户名和密码的有效性
		数据库反馈验证结果给业务逻辑层
		业务逻辑层根据结果，将对应的数据返回给表示层 
		表示层展示服务端响应
		
	
	初级测试工程师：手工在表示层，验证功能
	进阶测试工程师：在逻辑层测试接口（前后端分离开发）
	接口测试的能力很重要
	性能测试：离不开数据处理层和业务逻辑层， 例如相应时间性能和其他指标 
	
-------------------------------------------------------------	

P3: windows 常用命令
or Linux 常用命令

	查询电脑IP地址：



-------------------------------------------------------------
P4: 软件全生命周期
	1. 搜集市场需求--原始需求
	2. 可行性研究
	3. 产品项目立项
	4. 产品部门：需求开发
	 	输出需求规格说明书
	 	测试团队参与：需求评审，评价需求的可执行性
	 5. 设计->开发->测试
	 	设计
	 		开发团队：
	 			开发计划，根据项目计划制定开发计划
	 			概要设计：HLD
	 			详细设计：详细设计说明书 LLD
	 			数据库设计：表格形式的数据库设计说明书
	 		测试团队：
	 			测试计划设计：做什么
	 			测试方案设计：怎么做
	 			测试规程设计：规范
	 		
	 	开发
	 		开发团队：编码
	 		测试团队：编写测试用例
	 		
	 		
	 	测试
	 		开发团队：
	 			代码review 
	 			单元测试：测试函数和类是否正常
	 			集成测试：集成函数和类
	 			
	 			
	 		测试团队：
	 			功能测试
	 			接口测试
	 			性能测试	
	 		
	 		产品团队：
	 			验收测试		
	 		
	 	上线/运营/维护
	 		测试团队：
	 			跟进产品的改进迭代
	 			
	 6. 产品维护和迭代
	 	重复以上步骤
	 	
--------------------------------------------------------
	 
P5:软件研发模型
	1. 瀑布模型
		和软件生命周期几乎一致
		
	2. 增量迭代模型
	
	3. 螺旋模型
	
	4. 敏捷开发模型
		
		iterative development 
		敏捷开发的核心是迭代开发
		迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步开发
		
		增量开发
		每次增加一个完整的新的功能
		
		迭代+增量=敏捷开发
		
		好处：
			早期交付：降低成本
			降低风险：及时了解市场需求，降低产品不适用的风险
	scrum流程
	

-----------------------------------------------------

P6: 六大测试类型（1）

	1. 功能性测试：
		根据产品SRS和测试需求列表
		遗漏功能
		隐藏设计需求
	
	2. 可用性测试
		过份复杂的界面
	
	
	3. 兼容性测试
		在不同系统上的表现
	
	4. 可靠性测试
		
	
	5. 安全性测试
		产品漏洞，容错，稳定，自恢复， 对异常输入和文件的性能
		权限管理
		口令认证
		SQL注入
	
	6. 性能测试
		产品是否高效运行
		并发用户数
		响应时间
		资源,cpu,内存...
		自动驾驶相关性能指标！！！！！
	
	7. 对于自动驾驶来说，每一个功能模块都有自己的性能指标，和测试需求。因此需要对自动驾驶全pipeline有深入的了解，
	   对每一个模块的功能和算法有了解。需要不断扩充自己的知识。同时自动驾驶是部署在硬件系统上的，还有许多用户界面，
	   因此传统的基于bs,cs测试方法也需要学习。  
	   
	
-----------------------------------------------------------


P8: 软件测试四大过程
	1. 分析
		测试需求分析:测试点
		测试人员： 提取测试点，输出需求跟踪矩阵
		测试负责人：输出测试计划
		
	
	2. 设计
		测试负责人： 输出设计测试方案 
	
	3. 实现
		测试环境的配置
		测试数据的准备
		测试用例的实现
	
	4. 执行
		执行用例
		提交bug
		改进测试用例
		提交测试报告
	
-----------------------------------------------------------


P9:测试环境配置


PN: Python教学
Python 基础
Python 高阶-面对对象

---------------------------------------------------------
Python多线程：
	
	1. 线程：是进程内部进行cpu调度的基本单位。一个进程中至少有一个线程。
	import threading #导入模块
	
	2. 创建线程： thread(target=func[args=(value1,value2)]) 
		target 指定线程需要执行的任务，函数名不加括号
		args, 指定线程更执行的任务需要传递的实参，以元组形式传入
	3. 启动线程：start()
	
	主线程在子线程结束前先结束
	主线程结束，子线程跟随主线程结束而结束 （线程守护）
		方法：在线程启动前设置 setDaemon(True)
	主线程在子线程结束后结束 （线程阻塞）
		方法： join() 需要在线程启动后设置
	
	5. 线程锁：
		解决子线程共享全局变量时出现的数据冲突问题 （对全局变量进行写操作时）
		创建锁： lock=Lock()
		在编辑全局变量后获取锁，锁定全局变量只能由当前子线程编辑 lock.acquire()
		编辑完成后，释放锁(一定要释放锁）：lock.release()
		
		with lock:
		可以自动加锁和释放锁 
		

---------------------------------------------------------------------
P138: python高阶：正则表达式 实现对字符串的复杂控制

	将字符串进行分割
	s='fgn90dhsssh6555nkwdnlll' -> ['fgn','dhsssh','nkwdnlll']
	使用系统内置模块 re 
	方法：
		split(pattern,string) 使用字符串中与pattern匹配的内容进行分割，返回一个列表
			pattern:正则表达式
			string: 待处理的字符串
		sub(pattern,repl,string) 
			pattern : 正则表达式
			string :待处理的字符串
			repl : 新内容
		findall 以列表返回字符串中与pattern规则匹配的内容，如果没有匹配则返回空列表
	
	元字符：
		\w 匹配一个单词字符
		\W 匹配非单词字符 
		\d 匹配数字字符
		\D 匹配非数字字符
		\s 匹配空白字符
		\S 匹配非空白字符
		. 匹配除换行符 \n以外的任意一个字符
		$ 匹配字符串结尾
		^ 匹配字符串开头
		
		
--------------------------------------------	
P139 python 高阶-正则表达式2 







-------------------------------------------
P140 Python 高阶 TCP/IP简介

OSI 参考模型 
	七层网络模型 、
	
TCP/IP 模型 是对OSI模型的一个具体实现，是当今互联网的一个基础


---------------------------------------------




	


	
		
		
	
	
	
	
			
		
	
	



	
		
	
		
		
		
		
	
	

		
	
	
 	
 















		 
		
		
		
	
